name: AWS Manual Deploy

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Select AWS environment'
        required: true
        default: 'DEV'
        type: choice
        options:
          - DEV
          - STAGE

env:
  BUCKET_NAME: ${{ secrets.BUCKET_NAME }}
  AWS_REGION: ${{ secrets.AWS_REGION }}

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - uses: pnpm/action-setup@v4
        with:
          version: 9.3.0

      - name: Use Node.js 20
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'pnpm'

      - name: Install Turbo # I prefer Monorepos with Turbo
        run: pnpm install turbo --global

      - name: Set branch name
        shell: bash
        run: |
          branch=${GITHUB_REF##*/}
          echo "BRANCH=$branch" >> $GITHUB_ENV

      - name: Set environment
        shell: bash
        run: |
          environment=${{ github.event.inputs.environment }}
          echo "ENVIRONMENT=$environment" >> $GITHUB_ENV

      - name: Set current date
        shell: bash
        run: echo "DATE=$(TZ='Europe/Warsaw' date +'%Y-%m-%d-%H-%M-%S')" >> $GITHUB_ENV

      - name: Make scripts executable
        run: |
          chmod +x ./scripts/build-backend.sh
          chmod +x ./scripts/zip-backend.sh
          chmod +x ./scripts/upload-s3.sh
          chmod +x ./scripts/get-envs.sh

      - name: Choose IAM/APP
        shell: bash
        run: |
          if [[ $BRANCH == "main" ]]; then
            echo "AWS_ROLE=${{ secrets.IAM_PROD }}" >> $GITHUB_ENV
            echo "APP_NAME=prod-app" >> $GITHUB_ENV
            echo "BUCKET=${{ secrets.BUCKET_NAME }}-main" >> $GITHUB_ENV
          elif [[ $BRANCH == "staging" ]]; then
            echo "AWS_ROLE=${{ secrets.IAM_STAGING }}" >> $GITHUB_ENV
            echo "APP_NAME=stage-app" >> $GITHUB_ENV
            echo "BUCKET=${{ secrets.BUCKET_NAME }}-stage" >> $GITHUB_ENV
          else
            echo "AWS_ROLE=${{ secrets.IAM_DEV }}" >> $GITHUB_ENV
            echo "APP_NAME=dev-app" >> $GITHUB_ENV
            echo "BUCKET=${{ secrets.BUCKET_NAME }}" >> $GITHUB_ENV
          fi

        # OIDC authentication
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          role-to-assume: ${{ env.AWS_ROLE }}
          role-session-name: GitHubActions
          aws-region: ${{ env.AWS_REGION }}

      - name: Get envs
        shell: bash
        run: ./scripts/get-envs.sh --path=/EXPRESS/ --env-path=apps/express/

      - name: Install dependencies
        run: pnpm i --frozen-lockfile

      # There can be some migrations for db
      - name: run migrations
        run: pnpm run migration:up

      - name: Build backend
        run: ./scripts/build-backend.sh

      - name: Zip backend
        run: ./scripts/zip-backend.sh

      - name: Upload to S3
        run: ./scripts/upload-s3.sh ${{ env.BUCKET }} ${{ env.BRANCH }} ${{ env.DATE }}

      # CodeDeploy will take artifact from S3 and deploy it to EC2 instances
      - name: Deploy to AWS
        run: |
          deployment_id=$(aws deploy create-deployment --application-name ${{ env.APP_NAME }} --deployment-group-name ${{ env.APP_NAME }} --s3-location bucket=${{ env.BUCKET }},key=${{ env.BRANCH }}/${{ env.DATE }}/backend.zip,bundleType=zip --region ${{ env.AWS_REGION }} --file-exists-behavior OVERWRITE --output text)
          echo "Deployment ID: $deployment_id"
          aws deploy wait deployment-successful --deployment-id $deployment_id --region ${{ env.AWS_REGION }}
